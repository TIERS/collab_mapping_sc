// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package agentswarm

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type Position struct {
	X int32
	Y int32
}

func NewPositionFromBytes(bytes []byte) *Position {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &Position{}
	data.X = decode.Int32()
	data.Y = decode.Int32()
	decode.Close()
	return data
}

func (o *Position) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Int32(o.X).
		Int32(o.Y).
		Data()
}

type ImmutablePosition struct {
	objID int32
	keyID wasmlib.Key32
}

func (o ImmutablePosition) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o ImmutablePosition) Value() *Position {
	return NewPositionFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}

type MutablePosition struct {
	objID int32
	keyID wasmlib.Key32
}

func (o MutablePosition) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o MutablePosition) SetValue(value *Position) {
	wasmlib.SetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES, value.Bytes())
}

func (o MutablePosition) Value() *Position {
	return NewPositionFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}
