// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package agentswarm

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncRegister, funcRegisterThunk)
	exports.AddFunc(FuncRequestMission, funcRequestMissionThunk)
	exports.AddFunc(FuncSubmitLastMap, funcSubmitLastMapThunk)
	exports.AddFunc(FuncUploadMap, funcUploadMapThunk)
	exports.AddView(ViewGetMission, viewGetMissionThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableAgentSwarmState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("agentswarm.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Controller().Exists(), "missing mandatory controller")
	funcInit(ctx, f)
	ctx.Log("agentswarm.funcInit ok")
}

type RegisterContext struct {
	Params ImmutableRegisterParams
	State  MutableAgentSwarmState
}

func funcRegisterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("agentswarm.funcRegister")
	f := &RegisterContext{
		Params: ImmutableRegisterParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	funcRegister(ctx, f)
	ctx.Log("agentswarm.funcRegister ok")
}

type RequestMissionContext struct {
	Params ImmutableRequestMissionParams
	State  MutableAgentSwarmState
}

func funcRequestMissionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("agentswarm.funcRequestMission")
	f := &RequestMissionContext{
		Params: ImmutableRequestMissionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	funcRequestMission(ctx, f)
	ctx.Log("agentswarm.funcRequestMission ok")
}

type SubmitLastMapContext struct {
	State MutableAgentSwarmState
}

func funcSubmitLastMapThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("agentswarm.funcSubmitLastMap")
	f := &SubmitLastMapContext{
		State: MutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcSubmitLastMap(ctx, f)
	ctx.Log("agentswarm.funcSubmitLastMap ok")
}

type UploadMapContext struct {
	Params ImmutableUploadMapParams
	State  MutableAgentSwarmState
}

func funcUploadMapThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("agentswarm.funcUploadMap")
	f := &UploadMapContext{
		Params: ImmutableUploadMapParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	ctx.Require(f.Params.Map().Exists(), "missing mandatory map")
	funcUploadMap(ctx, f)
	ctx.Log("agentswarm.funcUploadMap ok")
}

type GetMissionContext struct {
	Results MutableGetMissionResults
	State   ImmutableAgentSwarmState
}

func viewGetMissionThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("agentswarm.viewGetMission")
	f := &GetMissionContext{
		Results: MutableGetMissionResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAgentSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetMission(ctx, f)
	ctx.Log("agentswarm.viewGetMission ok")
}
