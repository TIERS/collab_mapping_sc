// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package controllerswarm
import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type MapAgentIDToImmutableInt32 struct {
	objID int32
}

func (m MapAgentIDToImmutableInt32) GetInt32(key wasmlib.ScAgentID) wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(m.objID, key.KeyID())
}

type ArrayOfImmutableAgentID struct {
	objID int32
}

func (a ArrayOfImmutableAgentID) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableAgentID) GetAgentID(index int32) wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(a.objID, wasmlib.Key32(index))
}

type ArrayOfImmutableMapByzIndex struct {
	objID int32
}

func (a ArrayOfImmutableMapByzIndex) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableMapByzIndex) GetMapByzIndex(index int32) ImmutableMapByzIndex {
	return ImmutableMapByzIndex{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableOccupancyGrid struct {
	objID int32
}

func (a ArrayOfImmutableOccupancyGrid) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableOccupancyGrid) GetOccupancyGrid(index int32) ImmutableOccupancyGrid {
	subID := wasmlib.GetObjectID(a.objID, wasmlib.Key32(index), wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ImmutableOccupancyGrid{objID: subID}
}

type ImmutableControllerSwarmState struct {
	id int32
}

func (s ImmutableControllerSwarmState) Agents() MapAgentIDToImmutableInt32 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateAgents], wasmlib.TYPE_MAP)
	return MapAgentIDToImmutableInt32{objID: mapID}
}

func (s ImmutableControllerSwarmState) Length() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateLength])
}

func (s ImmutableControllerSwarmState) Missions() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateMissions])
}

func (s ImmutableControllerSwarmState) NoiseThreshold() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateNoiseThreshold])
}

func (s ImmutableControllerSwarmState) SubMapAgent() ArrayOfImmutableAgentID {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubMapAgent], wasmlib.TYPE_ARRAY|wasmlib.TYPE_AGENT_ID)
	return ArrayOfImmutableAgentID{objID: arrID}
}

func (s ImmutableControllerSwarmState) SubMapByzIndices() ArrayOfImmutableMapByzIndex {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubMapByzIndices], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableMapByzIndex{objID: arrID}
}

func (s ImmutableControllerSwarmState) SubmittedMaps() ArrayOfImmutableOccupancyGrid {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubmittedMaps], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableOccupancyGrid{objID: arrID}
}

func (s ImmutableControllerSwarmState) Width() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateWidth])
}

func (s ImmutableControllerSwarmState) WindowSize() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateWindowSize])
}

type MapAgentIDToMutableInt32 struct {
	objID int32
}

func (m MapAgentIDToMutableInt32) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapAgentIDToMutableInt32) GetInt32(key wasmlib.ScAgentID) wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(m.objID, key.KeyID())
}

type ArrayOfMutableAgentID struct {
	objID int32
}

func (a ArrayOfMutableAgentID) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableAgentID) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableAgentID) GetAgentID(index int32) wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(a.objID, wasmlib.Key32(index))
}

type ArrayOfMutableMapByzIndex struct {
	objID int32
}

func (a ArrayOfMutableMapByzIndex) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableMapByzIndex) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableMapByzIndex) GetMapByzIndex(index int32) MutableMapByzIndex {
	return MutableMapByzIndex{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableOccupancyGrid struct {
	objID int32
}

func (a ArrayOfMutableOccupancyGrid) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableOccupancyGrid) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableOccupancyGrid) GetOccupancyGrid(index int32) MutableOccupancyGrid {
	subID := wasmlib.GetObjectID(a.objID, wasmlib.Key32(index), wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return MutableOccupancyGrid{objID: subID}
}

type MutableControllerSwarmState struct {
	id int32
}

func (s MutableControllerSwarmState) Agents() MapAgentIDToMutableInt32 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateAgents], wasmlib.TYPE_MAP)
	return MapAgentIDToMutableInt32{objID: mapID}
}

func (s MutableControllerSwarmState) Length() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateLength])
}

func (s MutableControllerSwarmState) Missions() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateMissions])
}

func (s MutableControllerSwarmState) NoiseThreshold() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateNoiseThreshold])
}

func (s MutableControllerSwarmState) SubMapAgent() ArrayOfMutableAgentID {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubMapAgent], wasmlib.TYPE_ARRAY|wasmlib.TYPE_AGENT_ID)
	return ArrayOfMutableAgentID{objID: arrID}
}

func (s MutableControllerSwarmState) SubMapByzIndices() ArrayOfMutableMapByzIndex {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubMapByzIndices], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableMapByzIndex{objID: arrID}
}

func (s MutableControllerSwarmState) SubmittedMaps() ArrayOfMutableOccupancyGrid {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateSubmittedMaps], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableOccupancyGrid{objID: arrID}
}

func (s MutableControllerSwarmState) Width() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateWidth])
}

func (s MutableControllerSwarmState) WindowSize() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateWindowSize])
}
