// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package controllerswarm

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type MapByzIndex struct {
	Conflict    int32
	NonConflict int32
}

func NewMapByzIndexFromBytes(bytes []byte) *MapByzIndex {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &MapByzIndex{}
	data.Conflict = decode.Int32()
	data.NonConflict = decode.Int32()
	decode.Close()
	return data
}

func (o *MapByzIndex) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Int32(o.Conflict).
		Int32(o.NonConflict).
		Data()
}

type ImmutableMapByzIndex struct {
	objID int32
	keyID wasmlib.Key32
}

func (o ImmutableMapByzIndex) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o ImmutableMapByzIndex) Value() *MapByzIndex {
	return NewMapByzIndexFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}

type MutableMapByzIndex struct {
	objID int32
	keyID wasmlib.Key32
}

func (o MutableMapByzIndex) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o MutableMapByzIndex) SetValue(value *MapByzIndex) {
	wasmlib.SetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES, value.Bytes())
}

func (o MutableMapByzIndex) Value() *MapByzIndex {
	return NewMapByzIndexFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}
