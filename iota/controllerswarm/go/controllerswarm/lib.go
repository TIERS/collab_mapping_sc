// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package controllerswarm

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCompareMap, funcCompareMapThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncRegister, funcRegisterThunk)
	exports.AddFunc(FuncRequestMission, funcRequestMissionThunk)
	exports.AddFunc(FuncSubmitMap, funcSubmitMapThunk)
	exports.AddView(ViewGetMission, viewGetMissionThunk)
	exports.AddView(ViewGlobalMap, viewGlobalMapThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type CompareMapContext struct {
	Params  ImmutableCompareMapParams
	Results MutableCompareMapResults
	State   MutableControllerSwarmState
}

func funcCompareMapThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("controllerswarm.funcCompareMap")
	ctx.Require(ctx.Caller() == ctx.AccountID(), "no permission")

	f := &CompareMapContext{
		Params: ImmutableCompareMapParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableCompareMapResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: MutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Map1().Exists(), "missing mandatory map1")
	ctx.Require(f.Params.Map2().Exists(), "missing mandatory map2")
	funcCompareMap(ctx, f)
	ctx.Log("controllerswarm.funcCompareMap ok")
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableControllerSwarmState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("controllerswarm.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Length().Exists(), "missing mandatory length")
	ctx.Require(f.Params.NoiseThreshold().Exists(), "missing mandatory noiseThreshold")
	ctx.Require(f.Params.Width().Exists(), "missing mandatory width")
	ctx.Require(f.Params.WindowSize().Exists(), "missing mandatory windowSize")
	funcInit(ctx, f)
	ctx.Log("controllerswarm.funcInit ok")
}

type RegisterContext struct {
	Params ImmutableRegisterParams
	State  MutableControllerSwarmState
}

func funcRegisterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("controllerswarm.funcRegister")
	f := &RegisterContext{
		Params: ImmutableRegisterParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	funcRegister(ctx, f)
	ctx.Log("controllerswarm.funcRegister ok")
}

type RequestMissionContext struct {
	Params ImmutableRequestMissionParams
	State  MutableControllerSwarmState
}

func funcRequestMissionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("controllerswarm.funcRequestMission")
	f := &RequestMissionContext{
		Params: ImmutableRequestMissionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	funcRequestMission(ctx, f)
	ctx.Log("controllerswarm.funcRequestMission ok")
}

type SubmitMapContext struct {
	Params ImmutableSubmitMapParams
	State  MutableControllerSwarmState
}

func funcSubmitMapThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("controllerswarm.funcSubmitMap")
	f := &SubmitMapContext{
		Params: ImmutableSubmitMapParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	ctx.Require(f.Params.Map().Exists(), "missing mandatory map")
	funcSubmitMap(ctx, f)
	ctx.Log("controllerswarm.funcSubmitMap ok")
}

type GetMissionContext struct {
	Params  ImmutableGetMissionParams
	Results MutableGetMissionResults
	State   ImmutableControllerSwarmState
}

func viewGetMissionThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("controllerswarm.viewGetMission")
	f := &GetMissionContext{
		Params: ImmutableGetMissionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutableGetMissionResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Agent().Exists(), "missing mandatory agent")
	viewGetMission(ctx, f)
	ctx.Log("controllerswarm.viewGetMission ok")
}

type GlobalMapContext struct {
	Results MutableGlobalMapResults
	State   ImmutableControllerSwarmState
}

func viewGlobalMapThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("controllerswarm.viewGlobalMap")
	f := &GlobalMapContext{
		Results: MutableGlobalMapResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableControllerSwarmState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGlobalMap(ctx, f)
	ctx.Log("controllerswarm.viewGlobalMap ok")
}
